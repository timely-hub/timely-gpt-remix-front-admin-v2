name: Stg

on:
  push:
    branches:
      - stg

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to ACR
        run: |
          echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} --username ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/timely-gpt-remix-front-admin-v2:${{ github.sha }}

  trigger_infra:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Trigger infra repository workflow
        id: trigger_infra
        run: |
          curl -X POST -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${{ secrets.GIT_TOKEN }}" \
          https://api.github.com/repos/timely-hub/timely-infra/dispatches \
          -d '{"event_type":"update_front_admin", "client_payload": {"tag": "${{ github.sha }}"}}'

# TODO: 쿠버네티스 컨테이너 이미지 갱신 워크플로우 성공 검증.
#  wait_for_infra:
#    needs: trigger_infra
#    runs-on: ubuntu-latest
#    steps:
#      - name: Wait for infra repository workflow to finish
#        uses: actions/github-script@v7
#        with:
#          script: |
#            const owner = 'timely-hub';
#            const repo = 'timely-infra';
#            const event_type = 'update_front_admin';
#            const sha = '${{ github.sha }}';
#
#            // Wait for the workflow run to complete
#            let runCompleted = false;
#            let conclusion = 'failure';
#
#            while (!runCompleted) {
#              const { data: workflow_runs } = await github.rest.actions.listWorkflowRunsForRepo({
#                owner,
#                repo,
#                event: event_type,
#                status: 'success',
#                per_page: 1
#              });
#
#              if (workflow_runs.workflow_runs.length > 0) {
#                const run = workflow_runs.workflow_runs.find(r => r.head_sha === sha);
#                if (run) {
#                  runCompleted = true;
#                  conclusion = run.conclusion;
#                }
#              }
#
#              // Sleep for 30 seconds before checking again
#              await new Promise(resolve => setTimeout(resolve, 30000));
#            }
#
#            if (conclusion !== 'success') {
#              core.setFailed(`Infra workflow failed with conclusion: ${conclusion}`);
#            } else {
#              core.notice('Infra workflow succeeded');
#            }
